package programsClasses;

import rest.Course;

public class Program {
	private String name;
	private String specialization;
	private int totalCredits;
	private String institution;
	private Course[] requiredCourses;
	private Course[] electiveCourses;
	
	public String getName() {
		return name;
	}
	public String getSpecialization() {
		return specialization;
	}
	public int getTotalCredits() {
		return totalCredits;
	}
	public String getInstitution() {
		return institution;
	}
	public Course[] getRequiredCourses() {
		return requiredCourses;
	}
	public Course[] getElectiveCourses() {
		return electiveCourses;
	}
	public void setName(String name) {
		this.name = name;
	}
	public void setSpecialization(String specialization) {
		this.specialization = specialization;
	}
	public void setTotalCredits(int totalCredits) {
		this.totalCredits = totalCredits;
	}
	public void setInstitution(String institution) {
		this.institution = institution;
	}
	public void setRequiredCourses(Course[] requiredCourses) {
		this.requiredCourses = requiredCourses;
	}
	public void setElectiveCourses(Course[]	electiveCourses) {
		this.electiveCourses = electiveCourses;
	}
}

class GraduateProgram extends Program {
	private String coordinator;
	private static int creditCost;
	
	public GraduateProgram() {
		this.coordinator = "Jamie";
		creditCost = 60;
	}
	public GraduateProgram(String coordinator, int cost) {
		this.coordinator = coordinator;
		creditCost = cost;
	}
	public GraduateProgram(GraduateProgram other) {
		this.coordinator = other.coordinator;
	}
	
	public String getCoordinator() {
		return coordinator;
	}
	public int creditCost()	{
		return creditCost;
	}
	public void setCoordinator(String coordinator) {
		this.coordinator = coordinator;
	}
	public void setCreditCost(int cost) {
		creditCost = cost;
	}
	
	public String toString() {
		return "coordinator: " + coordinator + ", credit cost: " + creditCost;
	}
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		} 
		if (obj == null || getClass() != obj.getClass()) {
			return false;
		}
		
		GraduateProgram other = (GraduateProgram) obj;
		
		return coordinator.equals(other.coordinator);
	}
}

class UndergraduateProgram extends Program {
	private boolean accredited;
	private static int creditCost;
	
	public UndergraduateProgram() {
		this.accredited = false;
		creditCost = 60;
	}
	public UndergraduateProgram(boolean accredited, int cost) {
		this.accredited = accredited;
		creditCost = cost;
	}
	public UndergraduateProgram(UndergraduateProgram other) {
		this.accredited = other.accredited;
	}
	
	public boolean getAccredited() {
		return accredited;
	}
	public int getCreditCost() {
		return creditCost;
	}
	
	public void setAccredited(boolean accredited) {
		this.accredited = accredited;
	}
	public void setCreditCost(int cost) {
		creditCost = cost;
	}
	
	public String toString() {
		return "accredited: " + accredited + ", credit cost: " + creditCost;
	}
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		} 
		if (obj == null || getClass() != obj.getClass()) {
			return false;
		}
		
		UndergraduateProgram other = (UndergraduateProgram) obj;
		
		return accredited == other.accredited;
	}
}

class CertificateProgram extends Program {
	private int capacity;
	private static int creditCost;
	
	public CertificateProgram() {
		this.capacity = 30;
		creditCost = 60;
	}
	public CertificateProgram(int capacity, int cost) {
		this.capacity = capacity;
		creditCost = cost;
	}
	public CertificateProgram(CertificateProgram other) {
		this.capacity = other.capacity;
	}
	
	public int getCapacity() {
		return capacity;
	}
	public int getCreditCost() {
		return creditCost;
	}
	public void setCapacity(int capacity) {
		this.capacity = capacity;
	}
	public void setCreditCost(int cost) {
		creditCost = cost;
	}
	
	public String toString() {
		return "capacity: " + capacity + ", credit cost: " + creditCost;
	}
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		} 
		if (obj == null || getClass() != obj.getClass()) {
			return false;
		}
		
		CertificateProgram other = (CertificateProgram) obj;
		
		return capacity == other.capacity;
	}
}

class SpecialProgram extends Program {
	private int duration;
	private static int creditCost;
	
	public SpecialProgram() {
		this.duration = 30;
		creditCost = 60;
	}
	public SpecialProgram(int duration, int cost) {
		this.duration = duration;
		creditCost = cost;
	}
	public SpecialProgram(SpecialProgram other) {
		this.duration = other.duration;
	}
	public int getDuration() {
		return duration;
	}
	public int getCreditCost() {
		return creditCost;
	}
	public void setDuration(int duration) {
		this.duration = duration;
	}
	public void setCreditCost(int cost) {
		creditCost = cost;
	}
	
	public String toString() {
		return "duration: " + duration + ", credit cost: " + creditCost;
	}
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		} 
		if (obj == null || getClass() != obj.getClass()) {
			return false;
		}
		
		SpecialProgram other = (SpecialProgram) obj;
		
		return duration == other.duration;
	}
}

class Driver {
	public static void findLeastAndMostExpensiveProgram(Program[] programs){

        // Bubble Sort algorithm to order elements
        int n = programs.length;
        if (n > 1) {
	        for (int i = 0; i < n - 1; i++) {
	            for (int j = 0; j < n - i - 1; j++) {
		            if (programs[j].getTotalCredits() > programs[j+1].getTotalCredits()) {
		            // Swap the elements
		            Program temp = programs[j];
		            programs[j] = programs[j + 1];
		            programs[j + 1] = temp;
		            }
            	}
        	}
	        System.out.println(programs[0].toString());
	        System.out.println(programs[n-1].toString());
        } else if (n == 1) {
        	System.out.println(programs[0].toString());
        } else {
        	System.out.println("No programs were found");
        }
        
    }
	public static void main(String[] args) {
		UndergraduateProgram undergrad1 = new UndergraduateProgram();
		System.out.println(undergrad1);
		GraduateProgram grad1			= new GraduateProgram();
		System.out.println(grad1);
		CertificateProgram certificate1 = new CertificateProgram();
		System.out.println(certificate1);
		SpecialProgram special1			= new SpecialProgram();
		System.out.println(special1);
		UndergraduateProgram undergrad2 = new UndergraduateProgram();
		System.out.println(undergrad2);
		GraduateProgram grad2			= new GraduateProgram();
		System.out.println(grad2);
		CertificateProgram certificate2 = new CertificateProgram();
		System.out.println(certificate2);
		SpecialProgram special2			= new SpecialProgram();
		System.out.println(special2);
		UndergraduateProgram undergrad3 = new UndergraduateProgram();
		System.out.println(undergrad3);
		GraduateProgram grad3			= new GraduateProgram();
		System.out.println(grad3);
		
		if (grad1.equals(grad3)) {
			System.out.println("It is equal!");
		} else {
			System.out.println("Not equal!");
		}
		if (certificate1.equals(special1)) {
			System.out.println("It is equal!");
		} else {
			System.out.println("Not equal!");
		}
		if (grad1.equals(grad3)) {
			System.out.println("It is equal!");
		} else {
			System.out.println("Not equal!");
		}
		if (grad1.equals(grad3)) {
			System.out.println("It is equal!");
		} else {
			System.out.println("Not equal!");
		}
		
		Object[] array1 = {undergrad1, undergrad2, undergrad3, grad1, grad2, grad3, certificate1,
				certificate2, special2, special1, undergrad1, undergrad2, grad3, certificate2, special1};
		Object[] array2 = {undergrad1, undergrad1, undergrad3, grad1, undergrad2, grad3, certificate1,
				certificate2, special2, special2, undergrad1, undergrad2, grad2, certificate2, special1};
		
		
		
		
	}
}

